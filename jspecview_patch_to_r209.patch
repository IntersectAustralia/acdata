Index: test/TestLineNoParser.java
===================================================================
--- test/TestLineNoParser.java	(revision 209)
+++ test/TestLineNoParser.java	(working copy)
@@ -25,8 +25,8 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 
-import jspecview.util.JDXSourceStringTokenizer;
-import jspecview.util.JSpecViewUtils;
+import jspecview.source.JDXSourceStringTokenizer;
+import jspecview.common.JSpecViewUtils;
 
 // Adding Comment to test update from command line
 // Testing another update...
Index: test/TestDSProcessor.java
===================================================================
--- test/TestDSProcessor.java	(revision 209)
+++ test/TestDSProcessor.java	(working copy)
@@ -21,7 +21,7 @@
 
 import java.io.FileWriter;
 
-import jspecview.util.DisplaySchemesProcessor;
+import jspecview.application.DisplaySchemesProcessor;
 
 public class TestDSProcessor {
 
Index: src/jspecview/source/JDXSource.java
===================================================================
--- src/jspecview/source/JDXSource.java	(revision 209)
+++ src/jspecview/source/JDXSource.java	(working copy)
@@ -19,8 +19,11 @@
 
 package jspecview.source;
 
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.net.URL;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -100,56 +103,36 @@
   /** Indicates a Ntuple Source */
   public final static int NTUPLE = 2;
 
-  private static String getXmlType(String filecheck) {
-    return (filecheck.contains("<animl") ? "AML" : filecheck
-        .contains("xml-cml") ? "CML" : null);
+  private static JDXSource getXMLSource(String source) {
+    String xmlType = source.substring(0,400).toLowerCase();
+
+    if (xmlType.contains("<animl")) {
+      return AnIMLSource.getAniMLInstance(new ByteArrayInputStream(source.getBytes()));
+    }
+    else if (xmlType.contains("xml-cml")) {
+      return CMLSource.getCMLInstance(new ByteArrayInputStream(source.getBytes()));
+    }
+    return null;
   }
 
-  public static Object createJDXSource(String sourceContents, String filePath,
-                                       URL appletDocumentBase) {
+  public static JDXSource createJDXSource(String sourceContents, String filePath,
+                                       URL appletDocumentBase)
+    throws IOException, JSpecViewException
+  {
     InputStream in = null;
     System.out.println("createJDXSource " + filePath + " " + sourceContents + " " +
                        appletDocumentBase);
+ 
     if (filePath != null) {
-      Object ret = FileManager.getInputStream(filePath, true,
-                                              appletDocumentBase);
-      if (ret instanceof String)
-        return ret;
-      in = (InputStream) ret;
-      byte[] data = new byte[400];
-      try {
-        in.read(data, 0, 400);
+      in = FileManager.getInputStream(filePath, true, appletDocumentBase);
+      sourceContents = getContentFromInputStream(in); 
+
+      JDXSource xmlSource = getXMLSource(sourceContents);
+      if (xmlSource != null) {
+        return xmlSource;
       }
-      catch (IOException e) {
-        try {
-          in.close();
-        }
-        catch (IOException e1) {
-          //
-        }
-        return "Unable to read source : " + e.getMessage();
-      }
-      try {
-        in.close();
-      }
-      catch (IOException e1) {
-        //
-      }
-      sourceContents = (new String(data)).toLowerCase();
-      String xmlType = getXmlType(sourceContents);
-      if (xmlType != null) {
-        in = (InputStream) FileManager.getInputStream(filePath, true,
-            appletDocumentBase);
-        if (xmlType.equals("AML")) {
-          return AnIMLSource.getAniMLInstance(in);
-        }
-        return CMLSource.getCMLInstance(in);
-      }
     }
-    if (filePath != null) {
-      FileManager fm = new FileManager(appletDocumentBase);
-      sourceContents = fm.getFileAsString(filePath);
-    }
+
     int sourceType = determineJDXSourceType(sourceContents);
     //////////////////////////////////////////////
     double d1=0, d2=1;
@@ -182,7 +165,7 @@
     }
     determineRevPlot(d1, d2, datatype, xUnits);
     if (sourceType == -1) {
-      return "JDX Source Type not Recognized";
+      throw new JSpecViewException("JDX Source Type not Recognized");
     }
     try {
       switch (sourceType) {
@@ -193,13 +176,26 @@
       case NTUPLE:
         return NTupleSource.getInstance(sourceContents);
       // return RestrictedNTupleSource.getInstance(sourceContents, 128);
+      default:
+        throw new JSpecViewException("Unknown or unrecognised JCAMP-DX format");
       }
     } catch (JSpecViewException e) {
-      return "Error reading JDX format: " + e.getMessage();
+      throw new JSpecViewException("Error reading JDX format: " + e.getMessage());
     }
-    return "Error reading file";
   }
 
+  private static String getContentFromInputStream(InputStream in)
+    throws IOException
+  {
+    StringBuffer sb = new StringBuffer();
+    BufferedReader br = new BufferedReader(new InputStreamReader(in));
+    String line;
+    while ((line = br.readLine()) != null)
+      sb.append(line).append("\n");
+    br.close();
+    return sb.toString();
+  }
+
   /**
    * Determines the type of JDX Source
    * @param sourceContents the contents of the source
@@ -215,8 +211,9 @@
 
         return BLOCK;
       }
-      if (label.equals("##DATACLASS") && t.value.toUpperCase().equals("NTUPLES"))
+      if (label.equals("##DATACLASS") && t.value.toUpperCase().equals("NTUPLES")) {
           return NTUPLE;
+      }
       Arrays.sort(JDXSource.TABULAR_DATA_LABELS);
       if(Arrays.binarySearch(JDXSource.TABULAR_DATA_LABELS, label) > 0)
         return SIMPLE;
Index: src/jspecview/source/CMLSource.java
===================================================================
--- src/jspecview/source/CMLSource.java	(revision 209)
+++ src/jspecview/source/CMLSource.java	(working copy)
@@ -58,6 +58,7 @@
     } catch (Exception pe) {
       //System.out.println(getBufferData());
       System.err.println("Error: " + pe.getMessage());
+      pe.printStackTrace();
     }
 
     processErrors("CML");
Index: src/jspecview/application/MainFrame.java
===================================================================
--- src/jspecview/application/MainFrame.java	(revision 209)
+++ src/jspecview/application/MainFrame.java	(working copy)
@@ -1210,9 +1210,12 @@
       writeStatus("File: '" + filePath + "' is already opened");
       return;
     }
-    Object source = source = JDXSource.createJDXSource(null, filePath, null);
-    if (source instanceof String) {
-      writeStatus((String) source);
+    JDXSource source;
+    try {
+      source = JDXSource.createJDXSource(null, filePath, null);
+    }
+    catch (Exception e) {
+      writeStatus(e.getMessage());
       return;
     }
     currentSelectedSource = (JDXSource) source;
Index: src/jspecview/application/PreferencesDialog.java
===================================================================
--- src/jspecview/application/PreferencesDialog.java	(revision 209)
+++ src/jspecview/application/PreferencesDialog.java	(working copy)
@@ -268,16 +268,19 @@
 
     // init preview panel
     try {
-      Object ret = JDXSource.createJDXSource(null, "sample.jdx", null);
-      if (ret instanceof String)
-        return;
-      JDXSource source = (JDXSource) ret;
+      JDXSource source = JDXSource.createJDXSource(null, "sample.jdx", null);
+
       previewPanel = new JSVPanel(source.getSpectra());
       previewPanel.setZoomEnabled(false);
       previewPanel.setCoordinatesOn(true);
       previewPanel.setGridOn(true);
     }
+    catch (IOException ioe) {
+      ioe.printStackTrace();
+      return;
+    }
     catch (JSpecViewException ex) {
+      ex.printStackTrace();
     }
 
     if(previewPanel != null)
Index: src/jspecview/applet/JSVApplet.java
===================================================================
--- src/jspecview/applet/JSVApplet.java	(revision 209)
+++ src/jspecview/applet/JSVApplet.java	(working copy)
@@ -431,13 +431,17 @@
       writeStatus("Please set the 'filepath' or 'load file' parameter");
       return;
     }
-    Object ret = JDXSource.createJDXSource(data, fileName, base);
-    System.out.println(ret);
-    if (ret instanceof String) {
-      writeStatus((String) ret);
+
+    JDXSource source;
+    try {
+    	source = JDXSource.createJDXSource(data, fileName, base);
+    }
+    catch (Exception e) {
+      writeStatus(e.getMessage());
+      e.printStackTrace();
       return;
     }
-    source = (JDXSource) ret;
+
     specs = source.getSpectra();
     continuous = source.getJDXSpectrum(0).isContinuous();
     if (!compoundMenuOn2)
Index: src/jspecview/util/ZipUtil.java
===================================================================
--- src/jspecview/util/ZipUtil.java	(revision 209)
+++ src/jspecview/util/ZipUtil.java	(working copy)
@@ -35,7 +35,7 @@
 
 public class ZipUtil {
 
-  public static boolean isZipFile(InputStream is) throws Exception {
+  public static boolean isZipFile(InputStream is) throws IOException {
     byte[] abMagic = new byte[4];
     is.mark(5);
     int countRead = is.read(abMagic, 0, 4);
Index: src/jspecview/util/FileManager.java
===================================================================
--- src/jspecview/util/FileManager.java	(revision 209)
+++ src/jspecview/util/FileManager.java	(working copy)
@@ -33,7 +33,6 @@
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.zip.GZIPInputStream;
-import java.util.zip.ZipInputStream;
 
 public class FileManager {
 
@@ -52,146 +51,90 @@
     this.appletDocumentBase = appletDocumentBase;
   }
 
-  public String getFileAsString(String name) {
-    String[] data = new String[2];
-    data[0] = name;
-    // ignore error completely
-    getFileDataOrErrorAsString(data);
-    return data[1];
-  }
-
-  public boolean getFileDataOrErrorAsString(String[] data) {
-    data[1] = "";
-    String name = data[0];
+  public String getFileAsString(String name) throws IOException {
     if (name == null)
-      return false;
-    Object t = getBufferedReaderOrErrorMessageFromName(name, data);
-    if (t instanceof String) {
-      data[1] = (String) t;
-      return false;
+      throw new IOException("name is null");
+
+    BufferedReader br = getBufferedReaderFromName(name);
+
+    StringBuffer sb = new StringBuffer(8192);
+    String line;
+    while ((line = br.readLine()) != null) {
+      sb.append(line);
+      sb.append('\n');
     }
-    try {
-      BufferedReader br = (BufferedReader) t;
-      StringBuffer sb = new StringBuffer(8192);
-      String line;
-      int nBytesRead = 0;
-      while ((line = br.readLine()) != null) {
-        nBytesRead += line.length();
-        sb.append(line);
-        sb.append('\n');
-      }
-      br.close();
-      data[1] = sb.toString();
-      return true;
-    } catch (Exception ioe) {
-      data[1] = ioe.getMessage();
-      return false;
-    }
+    br.close();
+    return sb.toString();
   }
 
-  Object getBufferedReaderOrErrorMessageFromName(String name,
-                                                 String[] fullPathNameReturn) {
-    String[] names = classifyName(name);
-    if (openErrorMessage != null)
-      return openErrorMessage;
-    if (names == null)
-      return "cannot read file name: " + name;
-    if (fullPathNameReturn != null)
-      fullPathNameReturn[0] = names[0].replace('\\', '/');
-    return getUnzippedBufferedReaderOrErrorMessageFromName(names[0], false, false);
+  BufferedReader getBufferedReaderFromName(String name)
+    throws MalformedURLException, IOException
+  {
+    if (name == null)
+      throw new IOException("Cannot find " + name);
+    String path = classifyName(name);
+    return getUnzippedBufferedReaderFromName(path);
   }
 
-  private String[] classifyName(String name) {
-    if (name == null)
-      return null;
-    String[] names = new String[2];
+  private String classifyName(String name)
+    throws MalformedURLException
+  {
     if (appletDocumentBase != null) {
       // This code is only for the applet
-      try {
-        if (name.indexOf(":\\") == 1 || name.indexOf(":/") == 1)
-          name = "file:///" + name;
-        //System.out.println("filemanager name " + name);
-        //System.out.println("filemanager adb " + appletDocumentBase);
-        URL url = new URL(appletDocumentBase, name);
-        names[0] = url.toString();
-        // we add one to lastIndexOf(), so don't worry about -1 return value
-        names[1] = names[0].substring(names[0].lastIndexOf('/') + 1,
-                names[0].length());
-        //System.out.println("filemanager 0 " + names[0]);
-        //System.out.println("filemanager 1 " + names[1]);
-      } catch (MalformedURLException e) {
-        openErrorMessage = e.getMessage();
-      }
-      return names;
+      if (name.indexOf(":\\") == 1 || name.indexOf(":/") == 1)
+        name = "file:///" + name;
+      //System.out.println("filemanager name " + name);
+      //System.out.println("filemanager adb " + appletDocumentBase);
+      URL url = new URL(appletDocumentBase, name);
+      return url.toString();
     }
+
     // This code is for the app
-    int i = urlTypeIndex(name);
-    if (i >= 0) {
-      try {
-        URL url = new URL(name);
-        names[0] = url.toString();
-        names[1] = names[0].substring(names[0].lastIndexOf('/') + 1,
-            names[0].length());
-      } catch (MalformedURLException e) {
-        openErrorMessage = e.getMessage();
-      }
-      return names;
+    if (urlTypeIndex(name)) {
+      URL url = new URL(name);
+      return url.toString();
     }
     File file = new File(name);
-    names[0] = file.getAbsolutePath();
-    names[1] = file.getName();
-    return names;
+    return file.getAbsolutePath();
   }
 
   private final static String[] urlPrefixes = {"http:", "https:", "ftp:", "file:"};
 
-  private static int urlTypeIndex(String name) {
-    for (int i = 0; i < urlPrefixes.length; ++i) {
-      if (name.startsWith(urlPrefixes[i])) {
-        return i;
+  private static boolean urlTypeIndex(String name) {
+    for (String prefix : urlPrefixes) {
+      if (name.startsWith(prefix)) {
+        return true;
       }
     }
-    return -1;
+    return false;
   }
 
-  Object getUnzippedBufferedReaderOrErrorMessageFromName(String name,
-                                                         boolean allowZipStream,
-                                                         boolean isTypeCheckOnly) {
+  BufferedReader getUnzippedBufferedReaderFromName(String name)
+    throws IOException
+  {
+    System.out.println("getUnzippedBufferedReaderFromName called");
     String[] subFileList = null;
-    if (name.indexOf("|") >= 0)
-      name = (subFileList = TextFormat.split(name, "|"))[0];
-    Object t = getInputStreamOrErrorMessageFromName(name, true);
-    if (t instanceof String)
-      return t;
-    try {
-      BufferedInputStream bis = new BufferedInputStream((InputStream)t, 8192);
-      InputStream is = bis;
-      if (isGzip(is)) {
-        is = new GZIPInputStream(bis);
-      } else if (ZipUtil.isZipFile(is)) {
-        if (allowZipStream)
-          return new ZipInputStream(bis);
-        //danger -- converting bytes to String here.
-        //we lose 128-156 or so.
-        String s = (String) ZipUtil.getZipFileContents(is, subFileList, 1);
-        is.close();
-        return getBufferedReaderForString(s);
+    if (name.indexOf("|") >= 0) {
+      subFileList = TextFormat.split(name, "|");
+      if (subFileList != null && subFileList.length > 0) {
+    	  name = subFileList[0];
       }
-      return new BufferedReader(new InputStreamReader(is));
-    } catch (Exception ioe) {
-      return ioe.getMessage();
     }
+    InputStream in = getInputStream(name, true, appletDocumentBase);
+    BufferedInputStream bis = new BufferedInputStream(in, 8192);
+    if (isGzip(bis)) {
+      return new BufferedReader(new InputStreamReader(new GZIPInputStream(bis)));
+    } else if (ZipUtil.isZipFile(bis)) {
+      //danger -- converting bytes to String here.
+      //we lose 128-156 or so.
+      String s = (String) ZipUtil.getZipFileContents(bis, subFileList, 1);
+      bis.close();
+      return new BufferedReader(new StringReader(s));
+    }
+    return new BufferedReader(new InputStreamReader(bis));
   }
 
-  BufferedReader getBufferedReaderForString(String string) {
-    return new BufferedReader(new StringReader(string));
-  }
-
-  Object getInputStreamOrErrorMessageFromName(String name, boolean showMsg) {
-    return getInputStream(name, showMsg, appletDocumentBase);
-  }
-
-  static boolean isGzip(InputStream is) throws Exception {
+  private static boolean isGzip(InputStream is) throws IOException {
     byte[] abMagic = new byte[4];
     is.mark(5);
     int countRead = is.read(abMagic, 0, 4);
@@ -199,9 +142,10 @@
     return (countRead == 4 && abMagic[0] == (byte) 0x1F && abMagic[1] == (byte) 0x8B);
   }
 
-  public static Object getInputStream(String name, boolean showMsg, URL appletDocumentBase) {
-    //System.out.println("inputstream for " + name);
-    String errorMessage = null;
+  public static InputStream getInputStream(String name, boolean showMsg, URL appletDocumentBase)
+    throws IOException, MalformedURLException
+  {
+    System.out.println("inputstream for " + name);
     int iurlPrefix;
     for (iurlPrefix = urlPrefixes.length; --iurlPrefix >= 0;)
       if (name.startsWith(urlPrefixes[iurlPrefix]))
@@ -210,29 +154,24 @@
     boolean isApplet = (appletDocumentBase != null);
     InputStream in;
     int length;
-    try {
-      if (isApplet || isURL) {
-        URL url = (isApplet ? new URL(appletDocumentBase, name) : new URL(name));
-        name = url.toString();
-        if (showMsg)
-          Logger.info("FileManager opening URL " + url.toString());
-        URLConnection conn = url.openConnection();
-        length = conn.getContentLength();
-        in = conn.getInputStream();
-      } else {
-        if (showMsg)
-          Logger.info("FileManager opening file " + name);
-        File file = new File(name);
-        System.out.println(file);
-        length = (int) file.length();
-        in = new FileInputStream(file);
-        System.out.println(in);
-      }
-      return new MonitorInputStream(in, length);
-    } catch (Exception e) {
-      errorMessage = "" + e;
+    if (isApplet || isURL) {
+      URL url = (isApplet ? new URL(appletDocumentBase, name) : new URL(name));
+      name = url.toString();
+      if (showMsg)
+        Logger.info("FileManager opening URL " + url.toString());
+      URLConnection conn = url.openConnection();
+      length = conn.getContentLength();
+      in = conn.getInputStream();
+    } else {
+      if (showMsg)
+        Logger.info("FileManager opening file " + name);
+      File file = new File(name);
+      System.out.println(file);
+      length = (int) file.length();
+      in = new FileInputStream(file);
+      System.out.println(in);
     }
-    return errorMessage;
+    return new MonitorInputStream(in, length);
   }
 
   public URL getResource(Object object, String fileName, boolean flagError) {
